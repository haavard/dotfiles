#!/usr/bin/env sh
# aurupdate -- update and rebuild AUR packages from their git repositories
set -o errexit
set -o nounset

action=update
workdir="$PWD"

while [ -n "${1:-}" ]; do
    case "$1" in
        -l) action=list ;;
        *)  workdir="$1" ;;
     esac
     shift
done

# use a directory to synchronize user interaction
lockdir=/tmp/aur_$(tr -cd 'a-zA-Z0-9' </dev/urandom | head -c 32)
trap '[ -d "$lockdir" ] && rmdir "$lockdir"' INT TERM EXIT

# text formatting
bold=$(tput bold)
reset=$(tput sgr0)

# prompt a yes/no question
prompt() {
    question="$1"
    default="$2"
    [ "$default" = y ] && helper="[Y/n]" || helper="[y/N]"

    while :; do
        printf '%s> %s %s %s' "$bold" "$question" "$helper" "$reset"
        read -r response 2>/dev/null
        case "$response" in
            y|Y) return 0 ;;
            n|N) return 1 ;;
            '')  [ "$default" = y ] && return 0 || return 1 ;;
        esac
    done
}

# execute a command verbosely
verbose() {
    printf '%s> Running %s%s\n' "$bold" "$reset" "$*"
    "$@"
}

# update package with user confirmation
update_pkg() {
    pkg=$(basename "$1")

    if prompt "Update $pkg?" y; then
        verbose git merge
        verbose "$EDITOR" PKGBUILD
        build_pkg "$pkg"
    fi
}

# build package with user confirmation
build_pkg() {
    if prompt "Build $(basename "$1")?" y; then
        verbose makepkg -scfi || return 1
    else
        return 1
    fi
}

# git reset
reset_pkg() {
    if prompt "Reset $(basename "$1") to previous HEAD?" y; then
        verbose git reset --hard "$2"
    fi
}

# iterate over packages and find those with updates upstream
if [ "$action" = update ]; then
    printf '%s> Looking for outdated AUR repositories in %s%s\n' \
        "$bold" "$workdir" "$reset"
fi
for pkg in "$workdir"/*/; do (
    [ -d "$pkg"/.git ] || exit
    cd "$pkg"

    # get data from upstream
    git fetch --quiet 2>/dev/null

    # some magic git ref comparisons
    local_ref=$(git rev-parse @)
    remote_ref=$(git rev-parse '@{u}' 2>/dev/null)
    base_ref=$(git merge-base @ '@{u}' 2>/dev/null)

    if [ "$local_ref" != "$remote_ref" ] && [ "$local_ref" = "$base_ref" ] \
         || [ "$remote_ref" != "$base_ref" ]; then
        if [ "$action" = list ]; then
            basename "$pkg"
        elif [ "$action" = update ]; then
            # we're backgrounded; acquire lock before interacting with user
            while ! mkdir "$lockdir" 2>/dev/null; do sleep 0.1; done
            update_pkg "$pkg" || reset_pkg "$pkg" "$local_ref"
            rmdir "$lockdir"
        fi
    fi
) </dev/stdin & done
wait

if [ "$action" = update ]; then
    # rebuild -git packages if desired
    if prompt "Rebuild -git packages?" n; then
        for pkg in "$workdir"/*-git; do (
            [ -d "$pkg" ] || exit
            cd "$pkg"
            build_pkg "$pkg" || true
        ) done
    fi
fi
