#!/usr/bin/env bash
# xstatus -- daemon for setting the X root window name
set -o nounset

pidfile="${XDG_CACHE_HOME:-$HOME/.cache}"/xstatus.pid
if pgrep -fF "$pidfile" "$0" &>/dev/null; then
    echo "Already running ($(cat "$pidfile")), sending refresh signal..."
    kill -USR1 "$(cat "$pidfile")"
    exit
else
    echo "Writing PID $$ to '$pidfile'"
    echo $$ >"$pidfile"
fi

# instant refresh on USR1 (because wait is interrupted in main loop)
trap 'true' USR1

update_interval=5  # how often to run main loops (seconds)
checkupdates_interval=15  # how often to refresh checkupdates data (minutes)
date_format='+%a (W%V) %Y-%m-%d %H:%M'

# create temporary files to cache online data
temp_dir=$(mktemp -d --tmpdir xstatus.XXXXXXXXXX)
update_file=$(mktemp -p "$temp_dir" updates.XXXXXXXXXX)

# ensure everything is killed and cleaned up on exit
trap exit INT TERM
{   # shellcheck disable=SC2064
    trap "kill 0; rm '$update_file' && rmdir '$temp_dir'" EXIT
}

# exit with 0 if file is empty or older than $minutes
function file_expired {
    file=$1
    minutes=$2
    [ ! -s "$file" ] || [ -n "$(find "$file" -mmin +"$minutes")" ]
}

# online data refresh loop
( while :; do
    # don't do anything without a network connection
    if ! checknetwork; then
        sleep $update_interval
        continue
    fi

    # check for updates if we last checked more than $checkupdates_interval
    # minutes ago, or if pacman was run after that
    if file_expired "$update_file" "$checkupdates_interval" \
            || [ /var/log/pacman.log -nt "$update_file" ]; then
        # fetch updates to a temp file first, only overwriting on success
        # this avoids erasing $update_file if checkupdates/aurupdate fails
        temp_update_file=$(mktemp)

        if checkupdates >"$temp_update_file" \
                && aurupdate -l ~/aur >>"$temp_update_file"; then
            cat <(echo 'Updates:') "$temp_update_file" >"$update_file"
        fi
        rm "$temp_update_file"
    fi

    sleep $update_interval
done ) &

function wifi_status {
    wifi=$(iw dev | grep ssid | sed 's/\s*ssid\s//')
    if [ -z "$wifi" ]; then
        wifi='Disconnected'
    fi

    if pidof openvpn >/dev/null || pidof openconnect >/dev/null; then
        wifi="$wifi (VPN)"
    fi

    echo "$wifi"
}

function volume_status {
    volume=$(pamixer --get-volume)
    if [ "$(pamixer --get-mute)" = true ]; then
        speaker='ðŸ”‡'
    elif [ "$volume" -gt 50 ]; then
        speaker='ðŸ”Š'
    elif [ "$volume" -gt 0 ]; then
        speaker='ðŸ”‰'
    else
        speaker='ðŸ”ˆ'
    fi

    echo "$speaker$volume%"
}

# update status text
function refresh_xroot {
    date=$(date "$date_format")
    battery=$(acpi --battery | sed 's/Battery 0: //g')
    wifi=$(wifi_status)
    volume=$(volume_status)
    update_count=$(( $(wc -l <"$update_file") - 1 ))

    root="$wifi | $battery | $volume | $date"
    [ "$update_count" -gt 0 ] && root="${update_count}â‡… | $root"

    xsetroot -name " $root"
}

while :; do
    refresh_xroot
    sleep $update_interval &
    wait $!
done
